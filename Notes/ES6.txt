1,ES5只有全局作用域和函数作用域，ES6引入了块级作用域；
2,ES5中有函数命名提升，ES6中可以在块级作用域中声明;
3,ES6浏览器为了兼容老代码，有自己的行为方式：
    (1),允许在块级作用域内声明函数;
    (2),函数声明类似于var，即会提升到全局作用域或函数作用域的头部;
    (3),同时，函数还会提升到块级作用域的头部；
4,ES6声明变量的六种方法：
    var，function，let，const，import，class
5,在ES5之前，全局变量与顶层对象(浏览器里面是window对象，Node里面是global)是挂钩的，使用var、function声明的全局变量，直接在顶层对象里添加属性。使用let、const声明的全局变量，不在顶层对象里。

6，数组的解构赋值：
    示例：let [a,b,c]=['1','2','3'];
    左数量 > 右数量时，可以进行解构赋值，解构不成功值为undefined;
    右数量 > 左数量时，可以进行解构赋值;
    未完待续。。。

7,Class类
    本质是function，可以看作一个语法糖。类定义不会被提升,不可重复声明，类中方法不需要function关键字，方法间不能加分号。
    let Example=class{//匿名类
        constructor(a){
            this.a=a;
        }
    }

    let Example=class Example{//命名类
        consructor(a){
            this.a=a;
        }
    }

    属性：
        prototype仍旧存在，方法是直接定义在prototype上的。
        静态属性：class Example{}
                Example.a='1';//类静态属性，类中可以直接使用，不需要实例化;
        公共属性：Example.prototype.b='2';//实例化都可以用
        实例属性：定义在实例对象上的属性;
                class Example{
                    a=2;
                    consructor(){
                        console.log(this.a);
                    }
                }
        name属性：返回跟在class后的类名;
    方法：
        constructor方法，是类的默认方法，创建类的实例化对象时被调用。
        返回对象：constructor默认返回实例对象this，也可指定返回对象。
        静态方法：在类声明中，使用static关键字修饰。
        原型方法：不使用static关键字修饰，实例化之后调用。
        实例方法：写在constructor构造方法里面，绑定this。
8,声明 let、const
    let在块级作用域中声明一个变量，不支持变量提升，存在暂时性死区;
    const声明一个常量，但是对于对象的声明只能保证其地址指向不变
9、解构赋值
    针对数组或者对象进行模式匹配，然后对其中的变量进行赋值;
    基本：let [a,b,c]=[1,2,3];
    可嵌套：let [a,[b,c]]=[1,[2,3]];
    可忽略：let [a,,c]=[1,2,3];
    不完全解构：let [a=1,b]=[];
    剩余运算符：let [a,...b]=[1,2,3];
    字符串等：let[a,b,c,d,e]='hello';
    解构默认值：let [a=2] =[undefined];//默认值
        let [a=3,b=a]=[1,2];

10，Symbol，表示独一无二的值，最大的用法是用来定义对象的唯一属性名;

    

10、声明类与继承：class、extend


4、Promise的使用与实现
5、generator（异步编程、yield、next()、await 、async）
6、箭头函数this指向问题、拓展运算符
7、map和set有没有用过，如何实现一个数组去重，map数据结构有什么优点？
8、ES6怎么编译成ES5,css-loader原理,过程
9、ES6转成ES5的常见例子
使用es5实现es6的class
    