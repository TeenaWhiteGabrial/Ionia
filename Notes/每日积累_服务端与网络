1,常见状态码
    (1).200("OK")

    (2).400("BadRequest"),客户端方面的问题
        1).404:客户端发送的URL不对应任何资源;
        2).410:客户端发送的URL对应的资源曾经存在，但是现在不存在了。
    (3).500(Internal Server Error),服务端方面的问题;
2,DNS解析过程
    ...
    (1).ISP也找不到对应的IP地址信息，主机先向本地服务器进行递归查询;
        递归查询：如果主机所询问的本地域名服务器不知道被查询的域名的IP地址，则由本地域名服务器代替账户级继续查询。
    (2).本地服务器采用迭代查询，向根域名服务器服务器查询，先查找缓存，如果缓存中没有则返回顶级域名服务器的地址，
        本地域名服务器向顶级域名服务器进行查询;
    (3).顶级域名服务器先查找缓存，缓存中没有则返回权限服务器，由本地域名服务器一层层的查询权限域名服务器;
3,https、http2.0、http1.0、http1.1;
    (1).Http1.0：浏览器的每次请求都需要与服务器建立一个TCP连接,服务器处理完后立即断开TCP连接(无连接)，服务器也不跟踪每个客户端也不记录过去的请求;
    (2).Http1.1：
        1).允许长连接，允许使用connection=keep-alive建立长连接。
        2).请求管道化，按照FIFO的方式一个请求发出之后，不必等待这个请求的响应被接受到，下一个请求就可以再次发出，同时服务端返回请求的响应也是按照FIFO的顺序（请求管道化）。
        3).支持传送内容的一部分，这也是断点续传的基础
        4).缓存机制,http请求时，如果缓存命中，则取缓存。cache-control:相对时间，expire，绝对时间。
    (3).http2.0
        1).可以多路复用，一个TCP连接可以处理多个请求;
        2).可以进行头部压缩，减小体积，提升速度;
        3).服务器推送，推送客户端未请求但是用得到的资源到某些位置。
    (4).https
        1).SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议.(SSL,为网络通信提供安全和数据完整性的一种安全协议)
        2).需要用到ca申请证书，需要一定的费用
        3).服务器需要额外的负担，因此会对访问进行一些限制
        4).https方式：
            a.发送连接请求到服务器
            b.服务器和浏览器协商SSL加密的等级
            c.密级确定，服务器发送公钥到浏览器
            d.加密会话密钥发送到服务器
            e,服务器使用私钥解密出会话密钥
            f.双方使用会话密钥进行通信


4,cookies、session、sessionStorage、localStorage
    cookie:内容主要包括名字、值、过期时间、路径和域。不设置过期时间则表示过期时间为浏览器窗口关闭，此时会话cookie保存在内存里
        设置了过期时间，cookie就会保存到硬盘上。cookie不是很安全，可以使用cookie进行cookie欺骗，单个cookie的数据大小不可以超过4K,
        浏览器限制一个站点最多保存20个cookie，保存的是字符串，始终在同源的http请求中携带，有路径的概念，不同路径下的cookie不可以访问，
        。
    Session是保存在服务端的，在浏览器发送Http请求之后再服务端建立，将SessionID返回到浏览器端，一般存放在cookie里面。Session在
        一定时间内保存在服务器上，当访问增多，会占用服务器的性能，保存的是对象
    SessionStorage和localstorage仅在本地保存，其中SessionStorage仅在当前浏览器窗口关闭之前有效，而local在浏览器关闭后也始终有效。
    页面JS数据对象在页面刷新后或转到另一页面就不存在了。
5,前端持久化的方式、区别
    1).标准HTTP cookie，存放在document cookie中;
    2).Flash Cookie,将数据存放在flash的本地对象中;
    3).localStorage,本地化存储，不手动删除则永远存在,
    4).IndexedDB,浏览器内置的数据库，永久保存数据，键值对存储，NOSQL,异步，支持事务，同源限制，存储空间大。
6,CDN：内容分发网络，在客户端和浏览器之间加一个缓存机制，通过这个缓存机制动态获取IP地址根据地理位置，让用户到最近的服务器访问，储存html、css、js等静态资源。
  负载均衡：将特定的业务分担给多个服务器，提高业务处理能力，保证业务的高可用性。
7,非同源限制:
    1).无法读取非同源网页的cookie、Localstorage、IndexedDB;
    2).无法接触非同源网页的DOM;
    3).无法向非同源网页发送AJAX请求
8,跨域解决方案
    1).使用document.domain，设置为同一个主域名，可以跨域访问(限制同一个主域名);
    2).跨文档通信API，window.postMessage()，可以实现父窗口与其打开的子窗口之间相互发消息;
        发送：
            var openWindow=window.open('http://test2.com','title');
            openWindow.postMessage('Nice To Meet You','http://test.com');

        接收：
            window.addEventListener('Message',function(){
                e.source;//发送消息的窗口
                e.origin;//消息发向的网址
                e.data;//消息内容
            },false)
    3).JSONP,兼容性好，缺点是只支持get，不支持post。核心思想是通过添加一个<scripts>元素，向服务器请求JSON数据，服务器收到请求后，将数据放到指定名字的回调函数的参数位置传回来。
    4).CORS,跨域AJAX请求的根本解决方法
        服务端设置：Access-Control-Allow-Origin;
        浏览器：如果不带cookie不需要设置，如果带cookie需要设置xhr.withCredentials为true
9,keep-alive：告知服务端来建立一个长连接
10,TCP协议保证数据传输可靠性的方式
    (1) 校验和
    (2) 确认应答与序列号
    (3) 超时重传
    (4) 连接管理
    (5) 流量控制
    (6) 拥塞处理
11,
    